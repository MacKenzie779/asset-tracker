name: linux-arch-release

on:
  push:
    tags:
      - "v*"
  workflow_dispatch:

jobs:
  linux-arch:
    runs-on: ubuntu-latest
    container:
      image: archlinux:latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4

      # --- Pacman setup: stable mirrors, keyring, full refresh ---
      - name: Configure fast mirrors & refresh pacman
        shell: bash
        run: |
          set -euo pipefail
          # Use solid mirrors (CDN + kernel.org + archlinux.org fallback)
          cat >/etc/pacman.d/mirrorlist <<'EOF'
          Server = https://geo.mirror.pkgbuild.com/$repo/os/$arch
          Server = https://mirror.pkgbuild.com/$repo/os/$arch
          Server = https://mirrors.edge.kernel.org/archlinux/$repo/os/$arch
          Server = https://archlinux.org/mirrorlist/all/$repo/os/$arch
          EOF
          # Keyring first to avoid signature hiccups
          pacman -Sy --noconfirm archlinux-keyring
          # Full refresh + no download timeout (CI networks can be slow)
          pacman -Syyu --noconfirm --disable-download-timeout

      # --- Toolchains & libs needed for Tauri on Linux ---
      - name: Install build dependencies
        shell: bash
        run: |
          pacman -S --noconfirm --needed \
            base-devel git curl \
            nodejs npm \
            gtk3 webkit2gtk libsoup3 libayatana-appindicator librsvg

      # Rust (works fine inside containers)
      - name: Install Rust (stable)
        uses: dtolnay/rust-toolchain@stable

      # JS deps
      - name: Install frontend deps
        run: npm ci

      # Generate icons if icon.ico is missing (safe no-op if present)
      - name: Generate Tauri icons (if missing)
        shell: bash
        run: |
          if [ ! -f "src-tauri/icons/icon.ico" ]; then
            npx --yes @tauri-apps/cli@^1 icon src-tauri/icons/app-icon.png
          fi

      # Build React/Vite
      - name: Build frontend
        run: npm run build

      # Build AppImage; force outputs into repo-root ./target for predictable paths
      - name: Tauri build (AppImage)
        env:
          CARGO_TARGET_DIR: ${{ github.workspace }}/target
        run: npx tauri build --bundles appimage -v

      # Debug listing
      - name: Preview bundle dir
        if: always()
        run: |
          if [ -d "target/release/bundle" ]; then
            find target/release/bundle -maxdepth 3 -type f -printf "%p (%k KB)\n"
          else
            echo "target/release/bundle does not exist"
          fi

      # Find produced AppImage
      - name: Find AppImage
        id: find_img
        shell: bash
        run: |
          FILE="$(find target/release/bundle/appimage -type f -name "*.AppImage" | head -n1 || true)"
          if [ -z "$FILE" ]; then
            echo "No AppImage found." >&2
            exit 1
          fi
          echo "path=$FILE" >> "$GITHUB_OUTPUT"
          echo "Found: $FILE"

      # Upload as workflow artifact (useful on manual runs)
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: linux-appimage
          path: ${{ steps.find_img.outputs.path }}

      # Attach to tag release automatically
      - name: Publish GitHub Release (attach AppImage)
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v2
        with:
          draft: false
          prerelease: false
          generate_release_notes: true
          files: ${{ steps.find_img.outputs.path }}
