name: release-linux-flatpak

on:
  push:
    tags: ["v*"]
  workflow_dispatch:
    inputs:
      version:
        description: "Semver to build (e.g., 1.0.1). Leave empty to use latest tag."
        required: false
        type: string

jobs:
  flatpak:
    runs-on: ubuntu-24.04
    permissions:
      contents: write

    env:
      APP_ID: com.github.mackenzie779.assettracker
      RUNTIME: org.gnome.Platform
      SDK: org.gnome.Sdk
      RUNTIME_BRANCH: "47"   # bump when GNOME runtime updates

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: Install Rust (stable)
        uses: dtolnay/rust-toolchain@stable

      # Build deps for Tauri v2 + Flatpak tooling
      - name: Install Linux deps
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libwebkit2gtk-4.1-dev \
            libgtk-3-dev \
            libayatana-appindicator3-dev \
            librsvg2-dev \
            libsoup-3.0-dev \
            patchelf \
            flatpak flatpak-builder

      - name: Install frontend deps
        run: npm ci

      # Determine version (tag / manual input / latest tag / fallback)
      - name: Compute APP_VERSION
        env:
          INPUT_VERSION: ${{ inputs.version }}
        shell: bash
        run: |
          set -euo pipefail
          if [[ "${GITHUB_REF:-}" == refs/tags/* ]]; then
            ver="${GITHUB_REF_NAME#v}"
          elif [[ -n "${INPUT_VERSION}" ]]; then
            ver="${INPUT_VERSION}"
          else
            if git describe --tags --abbrev=0 >/dev/null 2>&1; then
              ver="$(git describe --tags --abbrev=0 | sed -E 's/^v//')"
            else
              ver="0.0.0-dev"
            fi
          fi
          echo "APP_VERSION=$ver" >> "$GITHUB_ENV"
          echo "Building version: $ver"

      - name: Set package.json version
        run: npm version --no-git-tag-version "${APP_VERSION}"

      # Build the .deb we’ll wrap as Flatpak
      - name: Build Debian package with Tauri
        run: npx @tauri-apps/cli@^2 build --bundles deb -v

      - name: Locate .deb
        id: find_deb
        shell: bash
        run: |
          set -euo pipefail
          d="$(ls -1 src-tauri/target/release/bundle/deb/*_"${APP_VERSION}"_*amd64.deb | head -n1)"
          echo "deb=${d}" >> "$GITHUB_OUTPUT"
          echo "Found: ${d}"

      # Inspect the .deb to auto-detect desktop/icon/bin names
      - name: Inspect .deb for names
        id: inspect_deb
        shell: bash
        run: |
          set -euo pipefail
          workdir="$(mktemp -d)"
          cp "${{ steps.find_deb.outputs.deb }}" "${workdir}/pkg.deb"
          cd "${workdir}"
          ar x pkg.deb
          mkdir data && tar -xf data.tar.* -C data

          desktop="$(basename "$(find data/usr/share/applications -maxdepth 1 -name '*.desktop' | head -n1 || true)")"
          iconfile="$(basename "$(find data/usr/share/icons -path '*/apps/*' \( -name '*.png' -o -name '*.svg' \) | head -n1 || true)")"
          iconbase="${iconfile%.*}"
          binname="$(basename "$(find data/usr/bin -maxdepth 1 -type f | head -n1 || true)")"

          [[ -z "${desktop}" ]] && desktop="AssetTracker.desktop"
          [[ -z "${iconbase}" ]] && iconbase="AssetTracker"
          [[ -z "${binname}"  ]] && binname="AssetTracker"

          echo "desktop=${desktop}"   >> "$GITHUB_OUTPUT"
          echo "iconbase=${iconbase}" >> "$GITHUB_OUTPUT"
          echo "binname=${binname}"   >> "$GITHUB_OUTPUT"

          echo "Desktop: ${desktop}"
          echo "Icon:    ${iconbase}"
          echo "Binary:  ${binname}"

      # Write the Flatpak manifest (wraps the .deb) — NOTE the quoted runtime-version
      - name: Write Flatpak manifest
        shell: bash
        run: |
          set -euo pipefail
          cat > ${APP_ID}.yml <<'YAML'
          app-id: ${APP_ID}
          runtime: ${RUNTIME}
          runtime-version: "${RUNTIME_BRANCH}"
          sdk: ${SDK}
          branch: stable
          command: ${BIN_NAME}
          finish-args:
            - --share=network
            - --socket=wayland
            - --socket=fallback-x11
            - --device=dri
            - --share=ipc
            - --filesystem=home
          rename-desktop-file: ${DESKTOP_FILE}
          rename-icon: ${ICON_BASE}
          modules:
            - name: assettracker-wrap
              buildsystem: simple
              build-commands:
                - ar x "$(basename "${DEB_PATH}")"
                - mkdir -p /app
                - tar -xf data.tar.* -C /app
                - mkdir -p /app/bin /app/share
                - if [ -d /app/usr/bin ]; then mv /app/usr/bin/* /app/bin/; fi
                - if [ -d /app/usr/share ]; then cp -a /app/usr/share/* /app/share/; fi
                - rm -rf /app/usr control.tar.* data.tar.* debian-binary
              sources:
                - type: file
                  path: ${DEB_PATH}
          YAML
          sed -i "s|\${APP_ID}|${APP_ID}|g" ${APP_ID}.yml
          sed -i "s|\${RUNTIME}|${RUNTIME}|g" ${APP_ID}.yml
          sed -i "s|\${RUNTIME_BRANCH}|${RUNTIME_BRANCH}|g" ${APP_ID}.yml
          sed -i "s|\${SDK}|${SDK}|g" ${APP_ID}.yml
          sed -i "s|\${DEB_PATH}|${{ steps.find_deb.outputs.deb }}|g" ${APP_ID}.yml
          sed -i "s|\${DESKTOP_FILE}|${{ steps.inspect_deb.outputs.desktop }}|g" ${APP_ID}.yml
          sed -i "s|\${ICON_BASE}|${{ steps.inspect_deb.outputs.iconbase }}|g" ${APP_ID}.yml
          sed -i "s|\${BIN_NAME}|${{ steps.inspect_deb.outputs.binname }}|g" ${APP_ID}.yml
          echo "=== Manifest ==="
          cat ${APP_ID}.yml

      # Prepare Flatpak (USER installation — no sudo)
      - name: Configure Flathub remote (user)
        run: flatpak --user remote-add --if-not-exists flathub https://dl.flathub.org/repo/flathub.flatpakrepo

      - name: Install Flatpak runtimes (user)
        run: |
          flatpak --user install -y --noninteractive flathub ${SDK}//${RUNTIME_BRANCH}
          flatpak --user install -y --noninteractive flathub ${RUNTIME}//${RUNTIME_BRANCH}
          flatpak --user remotes --show-details

      # Build repo + bundle (user installation)
      - name: Build Flatpak
        shell: bash
        run: |
          set -euo pipefail
          rm -rf build-dir repo
          flatpak-builder --user --force-clean --install-deps-from=flathub --repo=repo build-dir ${APP_ID}.yml
          flatpak build-bundle repo AssetTracker-${APP_VERSION}-x86_64.flatpak ${APP_ID} stable

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: linux-flatpak
          path: AssetTracker-${APP_VERSION}-x86_64.flatpak

      - name: Publish GitHub Release (attach .flatpak)
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ env.APP_VERSION }}
          name: AssetTracker v${{ env.APP_VERSION }}
          draft: false
          prerelease: false
          files: |
            AssetTracker-${{ env.APP_VERSION }}-x86_64.flatpak
